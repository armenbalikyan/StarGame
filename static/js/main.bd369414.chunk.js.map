{"version":3,"sources":["logo.svg","components/Utils/function.js","components/UI/PlayAgain.js","components/UI/StarsDisplay.js","components/UI/Colors.js","components/UI/PlayNumber.js","components/Main/Game.js","components/Utils/useGameStatus.js","components/Main/StarMatch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","PlayAgain","props","className","style","color","gameStatus","onClick","StarsDisplay","count","map","starId","key","colors","available","used","wrong","candidate","PlayNumber","backgroundColor","status","number","Game","timeLimit","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","cn","startNewGame","StarMatch","gameId","setGameId","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd369414.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\"\r\n\r\nexport const utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n        const sets = [[]];\r\n        const sums = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0, len = sets.length; j < len; j++) {\r\n                const candidateSet = sets[j].concat(arr[i]);\r\n                const candidateSum = utils.sum(candidateSet);\r\n                if (candidateSum <= max) {\r\n                    sets.push(candidateSet);\r\n                    sums.push(candidateSum);\r\n                }\r\n            }\r\n        }\r\n        return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n};","import React from \"react\"\r\n\r\nexport const PlayAgain = props => (\r\n    <div className=\"game-done\">\r\n        <div\r\n            className=\"message\"\r\n            style={{ color: props.gameStatus === 'lost' ? 'red' : 'green' }}\r\n        >\r\n            {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\r\n        </div>\r\n        <button onClick={props.onClick} className=\"btn\">Play Again</button>\r\n    </div>\r\n);","import React from \"react\"\r\nimport { utils } from \"../Utils/function\";\r\n\r\nexport const StarsDisplay = props => (\r\n    <>\r\n        {utils.range(1, props.count).map(starId => (\r\n            <div key={starId} className=\"star\" />\r\n        ))}\r\n    </>\r\n);","export const colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n};","import React from \"react\"\r\nimport { colors } from \"./Colors\";\r\n\r\nexport const PlayNumber = props => (\r\n    <button\r\n        className=\"number\"\r\n        style={{ backgroundColor: colors[props.status] }}\r\n        onClick={() => props.onClick(props.number, props.status)}\r\n    >\r\n        {props.number}\r\n    </button>\r\n);","import { useGameState } from \"../Utils/useGameStatus\";\r\nimport { utils } from \"../Utils/function\";\r\nimport { PlayAgain } from \"../UI/PlayAgain\";\r\nimport { StarsDisplay } from \"../UI/StarsDisplay\";\r\nimport { PlayNumber } from \"../UI/PlayNumber\";\r\nimport React from \"react\"\r\n\r\nexport const Game = props => {\r\n    const {\r\n        stars,\r\n        availableNums,\r\n        candidateNums,\r\n        secondsLeft,\r\n        setGameState,\r\n    } = useGameState();\r\n\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n    const gameStatus = availableNums.length === 0\r\n        ? 'won'\r\n        : secondsLeft === 0 ? 'lost' : 'active'\r\n\r\n    const numberStatus = number => {\r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n\r\n        return 'available';\r\n    };\r\n\r\n    const onNumberClick = (number, currentStatus) => {\r\n        if (currentStatus === 'used' || secondsLeft === 0) {\r\n            return;\r\n        }\r\n\r\n        const newCandidateNums =\r\n            currentStatus === 'available'\r\n                ? candidateNums.concat(number)\r\n                : candidateNums.filter(cn => cn !== number);\r\n\r\n        setGameState(newCandidateNums);\r\n    };\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n      </div>\r\n            <div className=\"body\">\r\n                <div className=\"left\">\r\n                    {gameStatus !== 'active' ? (\r\n                        <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />\r\n                    ) : (\r\n                            <StarsDisplay count={stars} />\r\n                        )}\r\n                </div>\r\n                <div className=\"right\">\r\n                    {utils.range(1, 9).map(number => (\r\n                        <PlayNumber\r\n                            key={number}\r\n                            status={numberStatus(number)}\r\n                            number={number}\r\n                            onClick={onNumberClick}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n        </div>\r\n    );\r\n};","import React, { useState, useEffect } from \"react\"\r\nimport { utils } from \"./function\";\r\n\r\nexport const useGameState = timeLimit => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n    useEffect(() => {\r\n        if (secondsLeft > 0 && availableNums.length > 0) {\r\n            const timerId = setTimeout(() => setSecondsLeft(secondsLeft - 1), 1000);\r\n            return () => clearTimeout(timerId);\r\n        }\r\n    });\r\n\r\n    const setGameState = (newCandidateNums) => {\r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n            setCandidateNums(newCandidateNums);\r\n        } else {\r\n            const newAvailableNums = availableNums.filter(\r\n                n => !newCandidateNums.includes(n)\r\n            );\r\n            setStars(utils.randomSumIn(newAvailableNums, 9));\r\n            setAvailableNums(newAvailableNums);\r\n            setCandidateNums([]);\r\n        }\r\n    };\r\n\r\n    return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n};","import { Game } from \"./Game\"\r\nimport React, { useState } from \"react\"\r\nimport \"../UI/Styles/styles.css\"\r\nexport const StarMatch = () => {\r\n    const [gameId, setGameId] = useState(1);\r\n    return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />;\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { StarMatch } from './components/Main/StarMatch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StarMatch />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}